#!/usr/bin/env node

/**
 * Production Setup Script
 * Automated setup for ISP Management System with PostgreSQL, JWT secrets, and WhatsApp
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const readline = require('readline');

console.log('🚀 ISP Management System - Production Setup');
console.log('==========================================\n');

// Configuration
const config = {
  serverPath: path.join(__dirname, '..', 'server'),
  clientPath: path.join(__dirname, '..', 'client'),
  envPath: path.join(__dirname, '..', 'server', '.env'),
  envExamplePath: path.join(__dirname, '..', 'server', 'env.production.example'),
  dbName: 'isp_management',
  dbUser: 'isp_user',
  dbPassword: generateSecurePassword(16),
  jwtSecret: generateSecurePassword(64),
  frontendUrl: 'http://172.17.2.3:3000',
  backendUrl: 'http://172.17.2.3:3001',
  serverIp: '172.17.2.3'
};

// Generate secure password
function generateSecurePassword(length = 16) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Ask question helper
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// Check if PostgreSQL is installed
function checkPostgreSQL() {
  try {
    execSync('psql --version', { stdio: 'pipe' });
    console.log('✅ PostgreSQL is installed');
    return true;
  } catch (error) {
    console.log('❌ PostgreSQL is not installed');
    return false;
  }
}

// Setup PostgreSQL database
async function setupPostgreSQL() {
  console.log('\n🔧 Setting up PostgreSQL database...');
  
  try {
    // Check if database already exists
    try {
      execSync(`sudo -u postgres psql -lqt | cut -d \\| -f 1 | grep -qw ${config.dbName}`, { stdio: 'pipe' });
      console.log(`⚠️  Database '${config.dbName}' already exists`);
      
      const recreate = await askQuestion('Do you want to recreate the database? (y/N): ');
      if (recreate.toLowerCase() === 'y') {
        execSync(`sudo -u postgres psql -c "DROP DATABASE IF EXISTS ${config.dbName};"`, { stdio: 'pipe' });
        console.log('🗑️  Existing database dropped');
      } else {
        console.log('⏭️  Using existing database');
        return;
      }
    } catch (error) {
      // Database doesn't exist, continue
    }
    
    // Create database
    execSync(`sudo -u postgres psql -c "CREATE DATABASE ${config.dbName};"`, { stdio: 'pipe' });
    console.log(`✅ Database '${config.dbName}' created`);
    
    // Create user
    execSync(`sudo -u postgres psql -c "DROP USER IF EXISTS ${config.dbUser};"`, { stdio: 'pipe' });
    execSync(`sudo -u postgres psql -c "CREATE USER ${config.dbUser} WITH PASSWORD '${config.dbPassword}';"`, { stdio: 'pipe' });
    console.log(`✅ User '${config.dbUser}' created`);
    
    // Grant privileges
    execSync(`sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${config.dbName} TO ${config.dbUser};"`, { stdio: 'pipe' });
    console.log('✅ Privileges granted');
    
  } catch (error) {
    console.log('❌ Error setting up PostgreSQL:', error.message);
    console.log('\n🔧 Manual setup required:');
    console.log(`   1. sudo -u postgres createdb ${config.dbName}`);
    console.log(`   2. sudo -u postgres psql -c "CREATE USER ${config.dbUser} WITH PASSWORD '${config.dbPassword}';"`);
    console.log(`   3. sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${config.dbName} TO ${config.dbUser};"`);
  }
}

// Create .env file
function createEnvFile() {
  console.log('\n📝 Creating .env file...');
  
  try {
    const envContent = `# Production Environment Variables
# Generated by setup-production.js on ${new Date().toISOString()}

# Server Configuration
PORT=3001
NODE_ENV=production

# Database Configuration (PostgreSQL)
DATABASE_URL="postgresql://${config.dbUser}:${config.dbPassword}@localhost:5432/${config.dbName}?schema=public"

# JWT Configuration
JWT_SECRET=${config.jwtSecret}
JWT_EXPIRES_IN=7d

# Frontend URL
FRONTEND_URL=${config.frontendUrl}

# WhatsApp Configuration
WHATSAPP_SESSION_PATH=./auth_info_baileys
WHATSAPP_QR_PATH=./qr-codes

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# File Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# Logging
LOG_LEVEL=info
LOG_FILE=./logs/app.log

# Security
BCRYPT_ROUNDS=12
CORS_ORIGIN=${config.frontendUrl}
CORS_ORIGIN_ALLOWED=http://localhost:3000,http://127.0.0.1:3000,${config.frontendUrl}

# Production Settings
PRODUCTION_MODE=true
ENABLE_LOGGING=true
ENABLE_MONITORING=true

# PostgreSQL Connection Pool
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10

# WhatsApp Bot Settings
WHATSAPP_BOT_ENABLED=true
WHATSAPP_BOT_NAME=ISP Management Bot
WHATSAPP_BOT_DESCRIPTION=Automated ISP Management System Bot
WHATSAPP_ADMIN_NUMBER=6282229261247

# Redis Configuration (Optional)
# REDIS_URL=redis://localhost:6379

# SSL Configuration (Optional)
# SSL_KEY_PATH=./ssl/private.key
# SSL_CERT_PATH=./ssl/certificate.crt
`;

    fs.writeFileSync(config.envPath, envContent);
    console.log('✅ .env file created with secure credentials');
    console.log(`   Database: ${config.dbName}`);
    console.log(`   User: ${config.dbUser}`);
    console.log(`   Password: ${config.dbPassword.substring(0, 8)}...`);
    console.log(`   JWT Secret: ${config.jwtSecret.substring(0, 16)}...`);
    
  } catch (error) {
    console.log('❌ Error creating .env file:', error.message);
  }
}

// Install dependencies
async function installDependencies() {
  console.log('\n📦 Installing dependencies...');
  
  try {
    // Server dependencies
    console.log('   Installing server dependencies...');
    execSync('npm install', { cwd: config.serverPath, stdio: 'inherit' });
    
    // Client dependencies
    console.log('   Installing client dependencies...');
    execSync('npm install', { cwd: config.clientPath, stdio: 'inherit' });
    
    console.log('✅ All dependencies installed');
    
  } catch (error) {
    console.log('❌ Error installing dependencies:', error.message);
    throw error;
  }
}

// Setup database with Prisma
async function setupDatabase() {
  console.log('\n🗄️  Setting up database...');
  
  try {
    // Generate Prisma client
    console.log('   Generating Prisma client...');
    execSync('npx prisma generate', { cwd: config.serverPath, stdio: 'inherit' });
    
    // Run migrations
    console.log('   Running database migrations...');
    execSync('npx prisma migrate deploy', { cwd: config.serverPath, stdio: 'inherit' });
    
    // Seed database
    console.log('   Seeding database...');
    execSync('npm run db:seed:prod', { cwd: config.serverPath, stdio: 'inherit' });
    
    console.log('✅ Database setup completed');
    
  } catch (error) {
    console.log('❌ Error setting up database:', error.message);
    console.log('\n🔧 Manual commands:');
    console.log('   cd server');
    console.log('   npx prisma generate');
    console.log('   npx prisma migrate deploy');
    console.log('   npm run db:seed:prod');
    throw error;
  }
}

// Create necessary directories
function createDirectories() {
  console.log('\n📁 Creating necessary directories...');
  
  const directories = [
    path.join(config.serverPath, 'logs'),
    path.join(config.serverPath, 'uploads'),
    path.join(config.serverPath, 'auth_info_baileys'),
    path.join(config.serverPath, 'qr-codes'),
    path.join(config.serverPath, 'ssl'),
    path.join(__dirname, '..', 'auth_info_baileys'),
    path.join(__dirname, '..', 'qr-codes')
  ];
  
  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`   ✅ Created: ${path.basename(dir)}`);
    } else {
      console.log(`   ⏭️  Exists: ${path.basename(dir)}`);
    }
  });
}

// Build client
async function buildClient() {
  console.log('\n🏗️  Building client...');
  
  try {
    execSync('npm run build', { cwd: config.clientPath, stdio: 'inherit' });
    console.log('✅ Client build completed');
    
  } catch (error) {
    console.log('❌ Error building client:', error.message);
    console.log('   Client will run in development mode');
  }
}

// Start services
async function startServices() {
  console.log('\n🚀 Starting services...');
  
  try {
    // Start server in background
    console.log('   Starting backend server...');
    const serverProcess = spawn('npm', ['run', 'start:production'], {
      cwd: config.serverPath,
      detached: true,
      stdio: 'ignore'
    });
    
    serverProcess.unref();
    console.log('   ✅ Backend server started (PID: ' + serverProcess.pid + ')');
    
    // Wait a moment for server to start
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Start WhatsApp Bot
    console.log('   Starting WhatsApp bot...');
    const whatsappProcess = spawn('node', ['scripts/whatsapp-bot-integrated.js'], {
      cwd: path.join(__dirname, '..'),
      detached: true,
      stdio: 'ignore',
      env: { 
        ...process.env, 
        NODE_ENV: 'production',
        NEXT_PUBLIC_API_URL: config.backendUrl,
        NEXT_PUBLIC_WS_URL: config.backendUrl.replace('http', 'ws')
      }
    });
    
    whatsappProcess.unref();
    console.log('   ✅ WhatsApp bot started (PID: ' + whatsappProcess.pid + ')');
    
    // Wait a moment for WhatsApp bot to initialize
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Start client
    console.log('   Starting frontend client...');
    const clientProcess = spawn('npm', ['run', 'start'], {
      cwd: config.clientPath,
      detached: true,
      stdio: 'ignore'
    });
    
    clientProcess.unref();
    console.log('   ✅ Frontend client started (PID: ' + clientProcess.pid + ')');
    
    console.log('\n🎉 All services started successfully!');
    console.log('\n📋 Service URLs:');
    console.log(`   Frontend: ${config.frontendUrl}`);
    console.log(`   Backend API: ${config.backendUrl}`);
    console.log(`   Prisma Studio: http://localhost:5555`);
    
    console.log('\n📱 WhatsApp Bot:');
    console.log('   ✅ WhatsApp bot is running independently');
    console.log('   📁 QR Code location: ./qr-codes/whatsapp-qr.png');
    console.log(`   🌐 Web access: ${config.backendUrl}/qr/whatsapp-qr.png`);
    console.log('   📱 Scan QR code with WhatsApp to connect');
    console.log('   🤖 Bot commands: /menu, /daftar, /jobs, /myjobs, /stats');
    
    console.log('\n🔧 Management Commands:');
    console.log('   View server logs: tail -f server/logs/app.log');
    console.log('   View WhatsApp status: cat scripts/whatsapp-status.json');
    console.log('   Stop all services: pkill -f "npm run start" && pkill -f "whatsapp-bot-integrated"');
    console.log('   Database studio: cd server && npm run db:studio');
    console.log('   Restart WhatsApp bot: node scripts/whatsapp-bot-integrated.js');
    
  } catch (error) {
    console.log('❌ Error starting services:', error.message);
  }
}

// Main execution
async function main() {
  try {
    console.log('Starting production setup...\n');
    
    // Check prerequisites
    if (!checkPostgreSQL()) {
      console.log('\n❌ PostgreSQL is required. Please install it first.');
      console.log('   Ubuntu/Debian: sudo apt install postgresql postgresql-contrib');
      console.log('   CentOS/RHEL: sudo yum install postgresql-server postgresql-contrib');
      console.log('   Windows: Download from https://www.postgresql.org/download/windows/');
      console.log('   macOS: brew install postgresql');
      process.exit(1);
    }
    
    // Get user preferences
    const serverIp = await askQuestion(`Server IP address (default: ${config.serverIp}): `);
    if (serverIp) {
      config.serverIp = serverIp;
      config.frontendUrl = `http://${serverIp}:3000`;
      config.backendUrl = `http://${serverIp}:3001`;
    }
    
    const frontendUrl = await askQuestion(`Frontend URL (default: ${config.frontendUrl}): `);
    if (frontendUrl) config.frontendUrl = frontendUrl;
    
    const backendUrl = await askQuestion(`Backend URL (default: ${config.backendUrl}): `);
    if (backendUrl) config.backendUrl = backendUrl;
    
    // Setup steps
    await setupPostgreSQL();
    createDirectories();
    createEnvFile();
    await installDependencies();
    await setupDatabase();
    await buildClient();
    
    // Confirm before starting services
    const startServicesConfirm = await askQuestion('\nStart all services now? (Y/n): ');
    if (startServicesConfirm.toLowerCase() !== 'n') {
      await startServices();
    } else {
      console.log('\n✅ Setup completed! Start services manually with:');
      console.log('   cd server && npm run start:production');
      console.log('   cd client && npm run start');
    }
    
    console.log('\n🎉 Production setup completed successfully!');
    console.log('\n📖 Documentation: POSTGRESQL-SETUP.md');
    console.log('🔧 Troubleshooting: Check server/logs/app.log');
    
  } catch (error) {
    console.log('\n❌ Setup failed:', error.message);
    console.log('\n🔧 Manual setup required. See POSTGRESQL-SETUP.md for details.');
  } finally {
    rl.close();
  }
}

// Run if called directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { 
  setupPostgreSQL, 
  createEnvFile, 
  installDependencies, 
  setupDatabase, 
  startServices 
};
